// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbow2voc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbow2voc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace visual_localization {
class Vocabulary_NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vocabulary_Node> {
} _Vocabulary_Node_default_instance_;
class Vocabulary_WordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vocabulary_Word> {
} _Vocabulary_Word_default_instance_;
class VocabularyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vocabulary> {
} _Vocabulary_default_instance_;

namespace protobuf_dbow2voc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Node, node_descriptor_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Word, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Word, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Word, word_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary_Word, node_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, scoring_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, weighting_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vocabulary, words_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(Vocabulary_Node)},
  { 13, 20, sizeof(Vocabulary_Word)},
  { 22, 33, sizeof(Vocabulary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vocabulary_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vocabulary_Word_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vocabulary_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dbow2voc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vocabulary_Node_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Vocabulary_Word_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Vocabulary_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vocabulary_Node_default_instance_.DefaultConstruct();
  _Vocabulary_Word_default_instance_.DefaultConstruct();
  _Vocabulary_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016dbow2voc.proto\022\023visual_localization\"\330\003"
      "\n\nVocabulary\022\t\n\001k\030\001 \002(\005\022\t\n\001l\030\002 \002(\005\022\024\n\014sc"
      "oring_type\030\003 \002(\005\022\026\n\016weighting_type\030\004 \002(\005"
      "\0223\n\005nodes\030\005 \003(\0132$.visual_localization.Vo"
      "cabulary.Node\0223\n\005words\030\006 \003(\0132$.visual_lo"
      "calization.Vocabulary.Word\032S\n\004Node\022\017\n\007no"
      "de_id\030\001 \002(\005\022\021\n\tparent_id\030\002 \002(\005\022\016\n\006weight"
      "\030\003 \002(\001\022\027\n\017node_descriptor\030\004 \002(\t\032(\n\004Word\022"
      "\017\n\007word_id\030\001 \002(\005\022\017\n\007node_id\030\002 \002(\005\"c\n\013Sco"
      "ringType\022\013\n\007L1_NORM\020\000\022\013\n\007L2_NORM\020\001\022\016\n\nCH"
      "I_SQUARE\020\002\022\006\n\002KL\020\003\022\021\n\rBHATTACHARYYA\020\004\022\017\n"
      "\013DOT_PRODUCT\020\005\"8\n\rWeightingType\022\n\n\006TF_ID"
      "F\020\000\022\006\n\002TF\020\001\022\007\n\003IDF\020\002\022\n\n\006BINARY\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 512);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbow2voc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dbow2voc_2eproto

const ::google::protobuf::EnumDescriptor* Vocabulary_ScoringType_descriptor() {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_enum_descriptors[0];
}
bool Vocabulary_ScoringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vocabulary_ScoringType Vocabulary::L1_NORM;
const Vocabulary_ScoringType Vocabulary::L2_NORM;
const Vocabulary_ScoringType Vocabulary::CHI_SQUARE;
const Vocabulary_ScoringType Vocabulary::KL;
const Vocabulary_ScoringType Vocabulary::BHATTACHARYYA;
const Vocabulary_ScoringType Vocabulary::DOT_PRODUCT;
const Vocabulary_ScoringType Vocabulary::ScoringType_MIN;
const Vocabulary_ScoringType Vocabulary::ScoringType_MAX;
const int Vocabulary::ScoringType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vocabulary_WeightingType_descriptor() {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_enum_descriptors[1];
}
bool Vocabulary_WeightingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vocabulary_WeightingType Vocabulary::TF_IDF;
const Vocabulary_WeightingType Vocabulary::TF;
const Vocabulary_WeightingType Vocabulary::IDF;
const Vocabulary_WeightingType Vocabulary::BINARY;
const Vocabulary_WeightingType Vocabulary::WeightingType_MIN;
const Vocabulary_WeightingType Vocabulary::WeightingType_MAX;
const int Vocabulary::WeightingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vocabulary_Node::kNodeIdFieldNumber;
const int Vocabulary_Node::kParentIdFieldNumber;
const int Vocabulary_Node::kWeightFieldNumber;
const int Vocabulary_Node::kNodeDescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vocabulary_Node::Vocabulary_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dbow2voc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:visual_localization.Vocabulary.Node)
}
Vocabulary_Node::Vocabulary_Node(const Vocabulary_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_descriptor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_descriptor()) {
    node_descriptor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_descriptor_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:visual_localization.Vocabulary.Node)
}

void Vocabulary_Node::SharedCtor() {
  _cached_size_ = 0;
  node_descriptor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(weight_));
}

Vocabulary_Node::~Vocabulary_Node() {
  // @@protoc_insertion_point(destructor:visual_localization.Vocabulary.Node)
  SharedDtor();
}

void Vocabulary_Node::SharedDtor() {
  node_descriptor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vocabulary_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vocabulary_Node::descriptor() {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vocabulary_Node& Vocabulary_Node::default_instance() {
  protobuf_dbow2voc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vocabulary_Node* Vocabulary_Node::New(::google::protobuf::Arena* arena) const {
  Vocabulary_Node* n = new Vocabulary_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vocabulary_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:visual_localization.Vocabulary.Node)
  if (has_node_descriptor()) {
    GOOGLE_DCHECK(!node_descriptor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*node_descriptor_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vocabulary_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:visual_localization.Vocabulary.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 parent_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_parent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string node_descriptor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_descriptor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_descriptor().data(), static_cast<int>(this->node_descriptor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "visual_localization.Vocabulary.Node.node_descriptor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:visual_localization.Vocabulary.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:visual_localization.Vocabulary.Node)
  return false;
#undef DO_
}

void Vocabulary_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:visual_localization.Vocabulary.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  // required string node_descriptor = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_descriptor().data(), static_cast<int>(this->node_descriptor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "visual_localization.Vocabulary.Node.node_descriptor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->node_descriptor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:visual_localization.Vocabulary.Node)
}

::google::protobuf::uint8* Vocabulary_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:visual_localization.Vocabulary.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight(), target);
  }

  // required string node_descriptor = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_descriptor().data(), static_cast<int>(this->node_descriptor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "visual_localization.Vocabulary.Node.node_descriptor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_descriptor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:visual_localization.Vocabulary.Node)
  return target;
}

size_t Vocabulary_Node::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:visual_localization.Vocabulary.Node)
  size_t total_size = 0;

  if (has_node_descriptor()) {
    // required string node_descriptor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_descriptor());
  }

  if (has_node_id()) {
    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  if (has_parent_id()) {
    // required int32 parent_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  if (has_weight()) {
    // required double weight = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Vocabulary_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:visual_localization.Vocabulary.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string node_descriptor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_descriptor());

    // required int32 node_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

    // required int32 parent_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());

    // required double weight = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vocabulary_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:visual_localization.Vocabulary.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Vocabulary_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vocabulary_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:visual_localization.Vocabulary.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:visual_localization.Vocabulary.Node)
    MergeFrom(*source);
  }
}

void Vocabulary_Node::MergeFrom(const Vocabulary_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:visual_localization.Vocabulary.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_node_descriptor();
      node_descriptor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_descriptor_);
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_id_ = from.parent_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vocabulary_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:visual_localization.Vocabulary.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vocabulary_Node::CopyFrom(const Vocabulary_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:visual_localization.Vocabulary.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vocabulary_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Vocabulary_Node::Swap(Vocabulary_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vocabulary_Node::InternalSwap(Vocabulary_Node* other) {
  node_descriptor_.Swap(&other->node_descriptor_);
  std::swap(node_id_, other->node_id_);
  std::swap(parent_id_, other->parent_id_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vocabulary_Node::GetMetadata() const {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vocabulary_Node

// required int32 node_id = 1;
bool Vocabulary_Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vocabulary_Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Vocabulary_Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vocabulary_Node::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 Vocabulary_Node::node_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.node_id)
  return node_id_;
}
void Vocabulary_Node::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.node_id)
}

// required int32 parent_id = 2;
bool Vocabulary_Node::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vocabulary_Node::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Vocabulary_Node::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vocabulary_Node::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
::google::protobuf::int32 Vocabulary_Node::parent_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.parent_id)
  return parent_id_;
}
void Vocabulary_Node::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.parent_id)
}

// required double weight = 3;
bool Vocabulary_Node::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vocabulary_Node::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void Vocabulary_Node::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vocabulary_Node::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
double Vocabulary_Node::weight() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.weight)
  return weight_;
}
void Vocabulary_Node::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.weight)
}

// required string node_descriptor = 4;
bool Vocabulary_Node::has_node_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vocabulary_Node::set_has_node_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
void Vocabulary_Node::clear_has_node_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vocabulary_Node::clear_node_descriptor() {
  node_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_descriptor();
}
const ::std::string& Vocabulary_Node::node_descriptor() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.node_descriptor)
  return node_descriptor_.GetNoArena();
}
void Vocabulary_Node::set_node_descriptor(const ::std::string& value) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.node_descriptor)
}
#if LANG_CXX11
void Vocabulary_Node::set_node_descriptor(::std::string&& value) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:visual_localization.Vocabulary.Node.node_descriptor)
}
#endif
void Vocabulary_Node::set_node_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:visual_localization.Vocabulary.Node.node_descriptor)
}
void Vocabulary_Node::set_node_descriptor(const char* value, size_t size) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:visual_localization.Vocabulary.Node.node_descriptor)
}
::std::string* Vocabulary_Node::mutable_node_descriptor() {
  set_has_node_descriptor();
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.Node.node_descriptor)
  return node_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Vocabulary_Node::release_node_descriptor() {
  // @@protoc_insertion_point(field_release:visual_localization.Vocabulary.Node.node_descriptor)
  clear_has_node_descriptor();
  return node_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Vocabulary_Node::set_allocated_node_descriptor(::std::string* node_descriptor) {
  if (node_descriptor != NULL) {
    set_has_node_descriptor();
  } else {
    clear_has_node_descriptor();
  }
  node_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_descriptor);
  // @@protoc_insertion_point(field_set_allocated:visual_localization.Vocabulary.Node.node_descriptor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vocabulary_Word::kWordIdFieldNumber;
const int Vocabulary_Word::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vocabulary_Word::Vocabulary_Word()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dbow2voc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:visual_localization.Vocabulary.Word)
}
Vocabulary_Word::Vocabulary_Word(const Vocabulary_Word& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&word_id_, &from.word_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&word_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:visual_localization.Vocabulary.Word)
}

void Vocabulary_Word::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&word_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&word_id_)) + sizeof(node_id_));
}

Vocabulary_Word::~Vocabulary_Word() {
  // @@protoc_insertion_point(destructor:visual_localization.Vocabulary.Word)
  SharedDtor();
}

void Vocabulary_Word::SharedDtor() {
}

void Vocabulary_Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vocabulary_Word::descriptor() {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vocabulary_Word& Vocabulary_Word::default_instance() {
  protobuf_dbow2voc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vocabulary_Word* Vocabulary_Word::New(::google::protobuf::Arena* arena) const {
  Vocabulary_Word* n = new Vocabulary_Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vocabulary_Word::Clear() {
// @@protoc_insertion_point(message_clear_start:visual_localization.Vocabulary.Word)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&word_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_id_) -
        reinterpret_cast<char*>(&word_id_)) + sizeof(node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vocabulary_Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:visual_localization.Vocabulary.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 word_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:visual_localization.Vocabulary.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:visual_localization.Vocabulary.Word)
  return false;
#undef DO_
}

void Vocabulary_Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:visual_localization.Vocabulary.Word)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 word_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->word_id(), output);
  }

  // required int32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:visual_localization.Vocabulary.Word)
}

::google::protobuf::uint8* Vocabulary_Word::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:visual_localization.Vocabulary.Word)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 word_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->word_id(), target);
  }

  // required int32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:visual_localization.Vocabulary.Word)
  return target;
}

size_t Vocabulary_Word::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:visual_localization.Vocabulary.Word)
  size_t total_size = 0;

  if (has_word_id()) {
    // required int32 word_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  if (has_node_id()) {
    // required int32 node_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  return total_size;
}
size_t Vocabulary_Word::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:visual_localization.Vocabulary.Word)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 word_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());

    // required int32 node_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vocabulary_Word::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:visual_localization.Vocabulary.Word)
  GOOGLE_DCHECK_NE(&from, this);
  const Vocabulary_Word* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vocabulary_Word>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:visual_localization.Vocabulary.Word)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:visual_localization.Vocabulary.Word)
    MergeFrom(*source);
  }
}

void Vocabulary_Word::MergeFrom(const Vocabulary_Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:visual_localization.Vocabulary.Word)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      word_id_ = from.word_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vocabulary_Word::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:visual_localization.Vocabulary.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vocabulary_Word::CopyFrom(const Vocabulary_Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:visual_localization.Vocabulary.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vocabulary_Word::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vocabulary_Word::Swap(Vocabulary_Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vocabulary_Word::InternalSwap(Vocabulary_Word* other) {
  std::swap(word_id_, other->word_id_);
  std::swap(node_id_, other->node_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vocabulary_Word::GetMetadata() const {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vocabulary_Word

// required int32 word_id = 1;
bool Vocabulary_Word::has_word_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vocabulary_Word::set_has_word_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Vocabulary_Word::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vocabulary_Word::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
::google::protobuf::int32 Vocabulary_Word::word_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Word.word_id)
  return word_id_;
}
void Vocabulary_Word::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Word.word_id)
}

// required int32 node_id = 2;
bool Vocabulary_Word::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vocabulary_Word::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Vocabulary_Word::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vocabulary_Word::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 Vocabulary_Word::node_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Word.node_id)
  return node_id_;
}
void Vocabulary_Word::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Word.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vocabulary::kKFieldNumber;
const int Vocabulary::kLFieldNumber;
const int Vocabulary::kScoringTypeFieldNumber;
const int Vocabulary::kWeightingTypeFieldNumber;
const int Vocabulary::kNodesFieldNumber;
const int Vocabulary::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vocabulary::Vocabulary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dbow2voc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:visual_localization.Vocabulary)
}
Vocabulary::Vocabulary(const Vocabulary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      nodes_(from.nodes_),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&weighting_type_) -
    reinterpret_cast<char*>(&k_)) + sizeof(weighting_type_));
  // @@protoc_insertion_point(copy_constructor:visual_localization.Vocabulary)
}

void Vocabulary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weighting_type_) -
      reinterpret_cast<char*>(&k_)) + sizeof(weighting_type_));
}

Vocabulary::~Vocabulary() {
  // @@protoc_insertion_point(destructor:visual_localization.Vocabulary)
  SharedDtor();
}

void Vocabulary::SharedDtor() {
}

void Vocabulary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vocabulary::descriptor() {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vocabulary& Vocabulary::default_instance() {
  protobuf_dbow2voc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vocabulary* Vocabulary::New(::google::protobuf::Arena* arena) const {
  Vocabulary* n = new Vocabulary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vocabulary::Clear() {
// @@protoc_insertion_point(message_clear_start:visual_localization.Vocabulary)
  nodes_.Clear();
  words_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&k_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weighting_type_) -
        reinterpret_cast<char*>(&k_)) + sizeof(weighting_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vocabulary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:visual_localization.Vocabulary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 k = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 scoring_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scoring_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoring_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 weighting_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_weighting_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weighting_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .visual_localization.Vocabulary.Node nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .visual_localization.Vocabulary.Word words = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:visual_localization.Vocabulary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:visual_localization.Vocabulary)
  return false;
#undef DO_
}

void Vocabulary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:visual_localization.Vocabulary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 k = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // required int32 l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->l(), output);
  }

  // required int32 scoring_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scoring_type(), output);
  }

  // required int32 weighting_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weighting_type(), output);
  }

  // repeated .visual_localization.Vocabulary.Node nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nodes(static_cast<int>(i)), output);
  }

  // repeated .visual_localization.Vocabulary.Word words = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->words(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:visual_localization.Vocabulary)
}

::google::protobuf::uint8* Vocabulary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:visual_localization.Vocabulary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 k = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  // required int32 l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->l(), target);
  }

  // required int32 scoring_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scoring_type(), target);
  }

  // required int32 weighting_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weighting_type(), target);
  }

  // repeated .visual_localization.Vocabulary.Node nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .visual_localization.Vocabulary.Word words = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->words(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:visual_localization.Vocabulary)
  return target;
}

size_t Vocabulary::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:visual_localization.Vocabulary)
  size_t total_size = 0;

  if (has_k()) {
    // required int32 k = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->k());
  }

  if (has_l()) {
    // required int32 l = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->l());
  }

  if (has_scoring_type()) {
    // required int32 scoring_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scoring_type());
  }

  if (has_weighting_type()) {
    // required int32 weighting_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weighting_type());
  }

  return total_size;
}
size_t Vocabulary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:visual_localization.Vocabulary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 k = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->k());

    // required int32 l = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->l());

    // required int32 scoring_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scoring_type());

    // required int32 weighting_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weighting_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .visual_localization.Vocabulary.Node nodes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .visual_localization.Vocabulary.Word words = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->words(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vocabulary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:visual_localization.Vocabulary)
  GOOGLE_DCHECK_NE(&from, this);
  const Vocabulary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vocabulary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:visual_localization.Vocabulary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:visual_localization.Vocabulary)
    MergeFrom(*source);
  }
}

void Vocabulary::MergeFrom(const Vocabulary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:visual_localization.Vocabulary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  words_.MergeFrom(from.words_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      k_ = from.k_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      scoring_type_ = from.scoring_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      weighting_type_ = from.weighting_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vocabulary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:visual_localization.Vocabulary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vocabulary::CopyFrom(const Vocabulary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:visual_localization.Vocabulary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vocabulary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->nodes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->words())) return false;
  return true;
}

void Vocabulary::Swap(Vocabulary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vocabulary::InternalSwap(Vocabulary* other) {
  nodes_.InternalSwap(&other->nodes_);
  words_.InternalSwap(&other->words_);
  std::swap(k_, other->k_);
  std::swap(l_, other->l_);
  std::swap(scoring_type_, other->scoring_type_);
  std::swap(weighting_type_, other->weighting_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vocabulary::GetMetadata() const {
  protobuf_dbow2voc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbow2voc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vocabulary

// required int32 k = 1;
bool Vocabulary::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vocabulary::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
void Vocabulary::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vocabulary::clear_k() {
  k_ = 0;
  clear_has_k();
}
::google::protobuf::int32 Vocabulary::k() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.k)
  return k_;
}
void Vocabulary::set_k(::google::protobuf::int32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.k)
}

// required int32 l = 2;
bool Vocabulary::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vocabulary::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
void Vocabulary::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vocabulary::clear_l() {
  l_ = 0;
  clear_has_l();
}
::google::protobuf::int32 Vocabulary::l() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.l)
  return l_;
}
void Vocabulary::set_l(::google::protobuf::int32 value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.l)
}

// required int32 scoring_type = 3;
bool Vocabulary::has_scoring_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vocabulary::set_has_scoring_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Vocabulary::clear_has_scoring_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vocabulary::clear_scoring_type() {
  scoring_type_ = 0;
  clear_has_scoring_type();
}
::google::protobuf::int32 Vocabulary::scoring_type() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.scoring_type)
  return scoring_type_;
}
void Vocabulary::set_scoring_type(::google::protobuf::int32 value) {
  set_has_scoring_type();
  scoring_type_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.scoring_type)
}

// required int32 weighting_type = 4;
bool Vocabulary::has_weighting_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vocabulary::set_has_weighting_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Vocabulary::clear_has_weighting_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vocabulary::clear_weighting_type() {
  weighting_type_ = 0;
  clear_has_weighting_type();
}
::google::protobuf::int32 Vocabulary::weighting_type() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.weighting_type)
  return weighting_type_;
}
void Vocabulary::set_weighting_type(::google::protobuf::int32 value) {
  set_has_weighting_type();
  weighting_type_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.weighting_type)
}

// repeated .visual_localization.Vocabulary.Node nodes = 5;
int Vocabulary::nodes_size() const {
  return nodes_.size();
}
void Vocabulary::clear_nodes() {
  nodes_.Clear();
}
const ::visual_localization::Vocabulary_Node& Vocabulary::nodes(int index) const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.nodes)
  return nodes_.Get(index);
}
::visual_localization::Vocabulary_Node* Vocabulary::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.nodes)
  return nodes_.Mutable(index);
}
::visual_localization::Vocabulary_Node* Vocabulary::add_nodes() {
  // @@protoc_insertion_point(field_add:visual_localization.Vocabulary.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >*
Vocabulary::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:visual_localization.Vocabulary.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >&
Vocabulary::nodes() const {
  // @@protoc_insertion_point(field_list:visual_localization.Vocabulary.nodes)
  return nodes_;
}

// repeated .visual_localization.Vocabulary.Word words = 6;
int Vocabulary::words_size() const {
  return words_.size();
}
void Vocabulary::clear_words() {
  words_.Clear();
}
const ::visual_localization::Vocabulary_Word& Vocabulary::words(int index) const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.words)
  return words_.Get(index);
}
::visual_localization::Vocabulary_Word* Vocabulary::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.words)
  return words_.Mutable(index);
}
::visual_localization::Vocabulary_Word* Vocabulary::add_words() {
  // @@protoc_insertion_point(field_add:visual_localization.Vocabulary.words)
  return words_.Add();
}
::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >*
Vocabulary::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:visual_localization.Vocabulary.words)
  return &words_;
}
const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >&
Vocabulary::words() const {
  // @@protoc_insertion_point(field_list:visual_localization.Vocabulary.words)
  return words_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace visual_localization

// @@protoc_insertion_point(global_scope)
