// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbow2voc.proto

#ifndef PROTOBUF_dbow2voc_2eproto__INCLUDED
#define PROTOBUF_dbow2voc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace visual_localization {
class Vocabulary;
class VocabularyDefaultTypeInternal;
extern VocabularyDefaultTypeInternal _Vocabulary_default_instance_;
class Vocabulary_Node;
class Vocabulary_NodeDefaultTypeInternal;
extern Vocabulary_NodeDefaultTypeInternal _Vocabulary_Node_default_instance_;
class Vocabulary_Word;
class Vocabulary_WordDefaultTypeInternal;
extern Vocabulary_WordDefaultTypeInternal _Vocabulary_Word_default_instance_;
}  // namespace visual_localization

namespace visual_localization {

namespace protobuf_dbow2voc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dbow2voc_2eproto

enum Vocabulary_ScoringType {
  Vocabulary_ScoringType_L1_NORM = 0,
  Vocabulary_ScoringType_L2_NORM = 1,
  Vocabulary_ScoringType_CHI_SQUARE = 2,
  Vocabulary_ScoringType_KL = 3,
  Vocabulary_ScoringType_BHATTACHARYYA = 4,
  Vocabulary_ScoringType_DOT_PRODUCT = 5
};
bool Vocabulary_ScoringType_IsValid(int value);
const Vocabulary_ScoringType Vocabulary_ScoringType_ScoringType_MIN = Vocabulary_ScoringType_L1_NORM;
const Vocabulary_ScoringType Vocabulary_ScoringType_ScoringType_MAX = Vocabulary_ScoringType_DOT_PRODUCT;
const int Vocabulary_ScoringType_ScoringType_ARRAYSIZE = Vocabulary_ScoringType_ScoringType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vocabulary_ScoringType_descriptor();
inline const ::std::string& Vocabulary_ScoringType_Name(Vocabulary_ScoringType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vocabulary_ScoringType_descriptor(), value);
}
inline bool Vocabulary_ScoringType_Parse(
    const ::std::string& name, Vocabulary_ScoringType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vocabulary_ScoringType>(
    Vocabulary_ScoringType_descriptor(), name, value);
}
enum Vocabulary_WeightingType {
  Vocabulary_WeightingType_TF_IDF = 0,
  Vocabulary_WeightingType_TF = 1,
  Vocabulary_WeightingType_IDF = 2,
  Vocabulary_WeightingType_BINARY = 3
};
bool Vocabulary_WeightingType_IsValid(int value);
const Vocabulary_WeightingType Vocabulary_WeightingType_WeightingType_MIN = Vocabulary_WeightingType_TF_IDF;
const Vocabulary_WeightingType Vocabulary_WeightingType_WeightingType_MAX = Vocabulary_WeightingType_BINARY;
const int Vocabulary_WeightingType_WeightingType_ARRAYSIZE = Vocabulary_WeightingType_WeightingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vocabulary_WeightingType_descriptor();
inline const ::std::string& Vocabulary_WeightingType_Name(Vocabulary_WeightingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vocabulary_WeightingType_descriptor(), value);
}
inline bool Vocabulary_WeightingType_Parse(
    const ::std::string& name, Vocabulary_WeightingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vocabulary_WeightingType>(
    Vocabulary_WeightingType_descriptor(), name, value);
}
// ===================================================================

class Vocabulary_Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:visual_localization.Vocabulary.Node) */ {
 public:
  Vocabulary_Node();
  virtual ~Vocabulary_Node();

  Vocabulary_Node(const Vocabulary_Node& from);

  inline Vocabulary_Node& operator=(const Vocabulary_Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vocabulary_Node& default_instance();

  static inline const Vocabulary_Node* internal_default_instance() {
    return reinterpret_cast<const Vocabulary_Node*>(
               &_Vocabulary_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Vocabulary_Node* other);

  // implements Message ----------------------------------------------

  inline Vocabulary_Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Vocabulary_Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vocabulary_Node& from);
  void MergeFrom(const Vocabulary_Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vocabulary_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string node_descriptor = 4;
  bool has_node_descriptor() const;
  void clear_node_descriptor();
  static const int kNodeDescriptorFieldNumber = 4;
  const ::std::string& node_descriptor() const;
  void set_node_descriptor(const ::std::string& value);
  #if LANG_CXX11
  void set_node_descriptor(::std::string&& value);
  #endif
  void set_node_descriptor(const char* value);
  void set_node_descriptor(const char* value, size_t size);
  ::std::string* mutable_node_descriptor();
  ::std::string* release_node_descriptor();
  void set_allocated_node_descriptor(::std::string* node_descriptor);

  // required int32 node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // required int32 parent_id = 2;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // required double weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  double weight() const;
  void set_weight(double value);

  // @@protoc_insertion_point(class_scope:visual_localization.Vocabulary.Node)
 private:
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_parent_id();
  void clear_has_parent_id();
  void set_has_weight();
  void clear_has_weight();
  void set_has_node_descriptor();
  void clear_has_node_descriptor();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr node_descriptor_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 parent_id_;
  double weight_;
  friend struct protobuf_dbow2voc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vocabulary_Word : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:visual_localization.Vocabulary.Word) */ {
 public:
  Vocabulary_Word();
  virtual ~Vocabulary_Word();

  Vocabulary_Word(const Vocabulary_Word& from);

  inline Vocabulary_Word& operator=(const Vocabulary_Word& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vocabulary_Word& default_instance();

  static inline const Vocabulary_Word* internal_default_instance() {
    return reinterpret_cast<const Vocabulary_Word*>(
               &_Vocabulary_Word_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Vocabulary_Word* other);

  // implements Message ----------------------------------------------

  inline Vocabulary_Word* New() const PROTOBUF_FINAL { return New(NULL); }

  Vocabulary_Word* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vocabulary_Word& from);
  void MergeFrom(const Vocabulary_Word& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vocabulary_Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 word_id = 1;
  bool has_word_id() const;
  void clear_word_id();
  static const int kWordIdFieldNumber = 1;
  ::google::protobuf::int32 word_id() const;
  void set_word_id(::google::protobuf::int32 value);

  // required int32 node_id = 2;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:visual_localization.Vocabulary.Word)
 private:
  void set_has_word_id();
  void clear_has_word_id();
  void set_has_node_id();
  void clear_has_node_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 word_id_;
  ::google::protobuf::int32 node_id_;
  friend struct protobuf_dbow2voc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vocabulary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:visual_localization.Vocabulary) */ {
 public:
  Vocabulary();
  virtual ~Vocabulary();

  Vocabulary(const Vocabulary& from);

  inline Vocabulary& operator=(const Vocabulary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vocabulary& default_instance();

  static inline const Vocabulary* internal_default_instance() {
    return reinterpret_cast<const Vocabulary*>(
               &_Vocabulary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Vocabulary* other);

  // implements Message ----------------------------------------------

  inline Vocabulary* New() const PROTOBUF_FINAL { return New(NULL); }

  Vocabulary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vocabulary& from);
  void MergeFrom(const Vocabulary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vocabulary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Vocabulary_Node Node;
  typedef Vocabulary_Word Word;

  typedef Vocabulary_ScoringType ScoringType;
  static const ScoringType L1_NORM =
    Vocabulary_ScoringType_L1_NORM;
  static const ScoringType L2_NORM =
    Vocabulary_ScoringType_L2_NORM;
  static const ScoringType CHI_SQUARE =
    Vocabulary_ScoringType_CHI_SQUARE;
  static const ScoringType KL =
    Vocabulary_ScoringType_KL;
  static const ScoringType BHATTACHARYYA =
    Vocabulary_ScoringType_BHATTACHARYYA;
  static const ScoringType DOT_PRODUCT =
    Vocabulary_ScoringType_DOT_PRODUCT;
  static inline bool ScoringType_IsValid(int value) {
    return Vocabulary_ScoringType_IsValid(value);
  }
  static const ScoringType ScoringType_MIN =
    Vocabulary_ScoringType_ScoringType_MIN;
  static const ScoringType ScoringType_MAX =
    Vocabulary_ScoringType_ScoringType_MAX;
  static const int ScoringType_ARRAYSIZE =
    Vocabulary_ScoringType_ScoringType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScoringType_descriptor() {
    return Vocabulary_ScoringType_descriptor();
  }
  static inline const ::std::string& ScoringType_Name(ScoringType value) {
    return Vocabulary_ScoringType_Name(value);
  }
  static inline bool ScoringType_Parse(const ::std::string& name,
      ScoringType* value) {
    return Vocabulary_ScoringType_Parse(name, value);
  }

  typedef Vocabulary_WeightingType WeightingType;
  static const WeightingType TF_IDF =
    Vocabulary_WeightingType_TF_IDF;
  static const WeightingType TF =
    Vocabulary_WeightingType_TF;
  static const WeightingType IDF =
    Vocabulary_WeightingType_IDF;
  static const WeightingType BINARY =
    Vocabulary_WeightingType_BINARY;
  static inline bool WeightingType_IsValid(int value) {
    return Vocabulary_WeightingType_IsValid(value);
  }
  static const WeightingType WeightingType_MIN =
    Vocabulary_WeightingType_WeightingType_MIN;
  static const WeightingType WeightingType_MAX =
    Vocabulary_WeightingType_WeightingType_MAX;
  static const int WeightingType_ARRAYSIZE =
    Vocabulary_WeightingType_WeightingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WeightingType_descriptor() {
    return Vocabulary_WeightingType_descriptor();
  }
  static inline const ::std::string& WeightingType_Name(WeightingType value) {
    return Vocabulary_WeightingType_Name(value);
  }
  static inline bool WeightingType_Parse(const ::std::string& name,
      WeightingType* value) {
    return Vocabulary_WeightingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .visual_localization.Vocabulary.Node nodes = 5;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 5;
  const ::visual_localization::Vocabulary_Node& nodes(int index) const;
  ::visual_localization::Vocabulary_Node* mutable_nodes(int index);
  ::visual_localization::Vocabulary_Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >&
      nodes() const;

  // repeated .visual_localization.Vocabulary.Word words = 6;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 6;
  const ::visual_localization::Vocabulary_Word& words(int index) const;
  ::visual_localization::Vocabulary_Word* mutable_words(int index);
  ::visual_localization::Vocabulary_Word* add_words();
  ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >*
      mutable_words();
  const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >&
      words() const;

  // required int32 k = 1;
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 1;
  ::google::protobuf::int32 k() const;
  void set_k(::google::protobuf::int32 value);

  // required int32 l = 2;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 2;
  ::google::protobuf::int32 l() const;
  void set_l(::google::protobuf::int32 value);

  // required int32 scoring_type = 3;
  bool has_scoring_type() const;
  void clear_scoring_type();
  static const int kScoringTypeFieldNumber = 3;
  ::google::protobuf::int32 scoring_type() const;
  void set_scoring_type(::google::protobuf::int32 value);

  // required int32 weighting_type = 4;
  bool has_weighting_type() const;
  void clear_weighting_type();
  static const int kWeightingTypeFieldNumber = 4;
  ::google::protobuf::int32 weighting_type() const;
  void set_weighting_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:visual_localization.Vocabulary)
 private:
  void set_has_k();
  void clear_has_k();
  void set_has_l();
  void clear_has_l();
  void set_has_scoring_type();
  void clear_has_scoring_type();
  void set_has_weighting_type();
  void clear_has_weighting_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word > words_;
  ::google::protobuf::int32 k_;
  ::google::protobuf::int32 l_;
  ::google::protobuf::int32 scoring_type_;
  ::google::protobuf::int32 weighting_type_;
  friend struct protobuf_dbow2voc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vocabulary_Node

// required int32 node_id = 1;
inline bool Vocabulary_Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vocabulary_Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vocabulary_Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vocabulary_Node::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Vocabulary_Node::node_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.node_id)
  return node_id_;
}
inline void Vocabulary_Node::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.node_id)
}

// required int32 parent_id = 2;
inline bool Vocabulary_Node::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vocabulary_Node::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vocabulary_Node::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vocabulary_Node::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Vocabulary_Node::parent_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.parent_id)
  return parent_id_;
}
inline void Vocabulary_Node::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.parent_id)
}

// required double weight = 3;
inline bool Vocabulary_Node::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vocabulary_Node::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vocabulary_Node::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vocabulary_Node::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double Vocabulary_Node::weight() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.weight)
  return weight_;
}
inline void Vocabulary_Node::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.weight)
}

// required string node_descriptor = 4;
inline bool Vocabulary_Node::has_node_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vocabulary_Node::set_has_node_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vocabulary_Node::clear_has_node_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vocabulary_Node::clear_node_descriptor() {
  node_descriptor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_descriptor();
}
inline const ::std::string& Vocabulary_Node::node_descriptor() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Node.node_descriptor)
  return node_descriptor_.GetNoArena();
}
inline void Vocabulary_Node::set_node_descriptor(const ::std::string& value) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Node.node_descriptor)
}
#if LANG_CXX11
inline void Vocabulary_Node::set_node_descriptor(::std::string&& value) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:visual_localization.Vocabulary.Node.node_descriptor)
}
#endif
inline void Vocabulary_Node::set_node_descriptor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:visual_localization.Vocabulary.Node.node_descriptor)
}
inline void Vocabulary_Node::set_node_descriptor(const char* value, size_t size) {
  set_has_node_descriptor();
  node_descriptor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:visual_localization.Vocabulary.Node.node_descriptor)
}
inline ::std::string* Vocabulary_Node::mutable_node_descriptor() {
  set_has_node_descriptor();
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.Node.node_descriptor)
  return node_descriptor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vocabulary_Node::release_node_descriptor() {
  // @@protoc_insertion_point(field_release:visual_localization.Vocabulary.Node.node_descriptor)
  clear_has_node_descriptor();
  return node_descriptor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vocabulary_Node::set_allocated_node_descriptor(::std::string* node_descriptor) {
  if (node_descriptor != NULL) {
    set_has_node_descriptor();
  } else {
    clear_has_node_descriptor();
  }
  node_descriptor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_descriptor);
  // @@protoc_insertion_point(field_set_allocated:visual_localization.Vocabulary.Node.node_descriptor)
}

// -------------------------------------------------------------------

// Vocabulary_Word

// required int32 word_id = 1;
inline bool Vocabulary_Word::has_word_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vocabulary_Word::set_has_word_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vocabulary_Word::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vocabulary_Word::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
inline ::google::protobuf::int32 Vocabulary_Word::word_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Word.word_id)
  return word_id_;
}
inline void Vocabulary_Word::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Word.word_id)
}

// required int32 node_id = 2;
inline bool Vocabulary_Word::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vocabulary_Word::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vocabulary_Word::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vocabulary_Word::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Vocabulary_Word::node_id() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.Word.node_id)
  return node_id_;
}
inline void Vocabulary_Word::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.Word.node_id)
}

// -------------------------------------------------------------------

// Vocabulary

// required int32 k = 1;
inline bool Vocabulary::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vocabulary::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vocabulary::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vocabulary::clear_k() {
  k_ = 0;
  clear_has_k();
}
inline ::google::protobuf::int32 Vocabulary::k() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.k)
  return k_;
}
inline void Vocabulary::set_k(::google::protobuf::int32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.k)
}

// required int32 l = 2;
inline bool Vocabulary::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vocabulary::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vocabulary::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vocabulary::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline ::google::protobuf::int32 Vocabulary::l() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.l)
  return l_;
}
inline void Vocabulary::set_l(::google::protobuf::int32 value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.l)
}

// required int32 scoring_type = 3;
inline bool Vocabulary::has_scoring_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vocabulary::set_has_scoring_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vocabulary::clear_has_scoring_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vocabulary::clear_scoring_type() {
  scoring_type_ = 0;
  clear_has_scoring_type();
}
inline ::google::protobuf::int32 Vocabulary::scoring_type() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.scoring_type)
  return scoring_type_;
}
inline void Vocabulary::set_scoring_type(::google::protobuf::int32 value) {
  set_has_scoring_type();
  scoring_type_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.scoring_type)
}

// required int32 weighting_type = 4;
inline bool Vocabulary::has_weighting_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vocabulary::set_has_weighting_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vocabulary::clear_has_weighting_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vocabulary::clear_weighting_type() {
  weighting_type_ = 0;
  clear_has_weighting_type();
}
inline ::google::protobuf::int32 Vocabulary::weighting_type() const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.weighting_type)
  return weighting_type_;
}
inline void Vocabulary::set_weighting_type(::google::protobuf::int32 value) {
  set_has_weighting_type();
  weighting_type_ = value;
  // @@protoc_insertion_point(field_set:visual_localization.Vocabulary.weighting_type)
}

// repeated .visual_localization.Vocabulary.Node nodes = 5;
inline int Vocabulary::nodes_size() const {
  return nodes_.size();
}
inline void Vocabulary::clear_nodes() {
  nodes_.Clear();
}
inline const ::visual_localization::Vocabulary_Node& Vocabulary::nodes(int index) const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.nodes)
  return nodes_.Get(index);
}
inline ::visual_localization::Vocabulary_Node* Vocabulary::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.nodes)
  return nodes_.Mutable(index);
}
inline ::visual_localization::Vocabulary_Node* Vocabulary::add_nodes() {
  // @@protoc_insertion_point(field_add:visual_localization.Vocabulary.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >*
Vocabulary::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:visual_localization.Vocabulary.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Node >&
Vocabulary::nodes() const {
  // @@protoc_insertion_point(field_list:visual_localization.Vocabulary.nodes)
  return nodes_;
}

// repeated .visual_localization.Vocabulary.Word words = 6;
inline int Vocabulary::words_size() const {
  return words_.size();
}
inline void Vocabulary::clear_words() {
  words_.Clear();
}
inline const ::visual_localization::Vocabulary_Word& Vocabulary::words(int index) const {
  // @@protoc_insertion_point(field_get:visual_localization.Vocabulary.words)
  return words_.Get(index);
}
inline ::visual_localization::Vocabulary_Word* Vocabulary::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:visual_localization.Vocabulary.words)
  return words_.Mutable(index);
}
inline ::visual_localization::Vocabulary_Word* Vocabulary::add_words() {
  // @@protoc_insertion_point(field_add:visual_localization.Vocabulary.words)
  return words_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >*
Vocabulary::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:visual_localization.Vocabulary.words)
  return &words_;
}
inline const ::google::protobuf::RepeatedPtrField< ::visual_localization::Vocabulary_Word >&
Vocabulary::words() const {
  // @@protoc_insertion_point(field_list:visual_localization.Vocabulary.words)
  return words_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace visual_localization

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::visual_localization::Vocabulary_ScoringType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::visual_localization::Vocabulary_ScoringType>() {
  return ::visual_localization::Vocabulary_ScoringType_descriptor();
}
template <> struct is_proto_enum< ::visual_localization::Vocabulary_WeightingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::visual_localization::Vocabulary_WeightingType>() {
  return ::visual_localization::Vocabulary_WeightingType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dbow2voc_2eproto__INCLUDED
